{"kind":"project","schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"category":"Using GlobalDependencies","categoryPathComponent":"Using-GlobalDependencies","role":"project","title":"Setting up a Global Dependency"},"sections":[{"kind":"hero","estimatedTimeInMinutes":15,"chapter":"Setting up a Dependency","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through a sample set up for a global dependency using the ","type":"text"},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}]},{"inlineContent":[{"type":"text","text":"The tutorial will also demonstrate how to name types and variables to take additional advantage of the"},{"type":"text","text":" "},{"text":"GlobalDependencies macros defaults.","type":"text"}],"type":"paragraph"}],"xcodeRequirement":"Xcode 15","title":"Setting up a Global Dependency"},{"kind":"tasks","tasks":[{"anchor":"Before-You-Begin","stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First we’ll have a "},{"code":"ClownManager","type":"codeVoice"},{"type":"text","text":" protocol which declares the API our app needs to manage its clown. To"},{"type":"text","text":" "},{"text":"avoid confusion with other protocols required for dependency management we will call this one the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“API protocol” throughout the tutorial."}]}],"code":"DependencySetup-1-1-ClownManager.swift","type":"step","caption":[],"media":null},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We also have a default implementation that wraps the clown-as-a-service API from pagliacci.io. We","type":"text"},{"type":"text","text":" "},{"text":"declare it as a class but could be any type as long as it adopts ","type":"text"},{"code":"ClownManager","type":"codeVoice"}]}],"type":"step","code":"DependencySetup-1-2-PagliacciClownManager.swift","runtimePreview":null,"caption":[]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Finally as a thinly veiled conceit to demonstrate how the ","type":"text"},{"code":"@Dependency","type":"codeVoice"},{"type":"text","text":" macro’s "},{"type":"codeVoice","code":"lowercased:"},{"text":" parameter","type":"text"},{"text":" ","type":"text"},{"text":"works, we will also have a ","type":"text"},{"type":"codeVoice","code":"HONKDevice"},{"type":"text","text":" protocol for an additional dependency that can be reused by"},{"type":"text","text":" "},{"text":"either clowns or geese.","type":"text"}]}],"caption":[],"media":null,"code":"DependencySetup-1-3-HONKDevice.swift","type":"step"}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declaring the API for a dependency is out of scope for this tutorial, it depends on the needs of your"},{"type":"text","text":" "},{"text":"codebase. For the sake of this tutorial we will have already some types related to clown management that we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"plan on using to manage our app’s clown. If your app doesn’t manage a clown you’re doing it wrong."}]}]}],"title":"Before You Begin"},{"title":"Implement the default dependency value factory","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Before we declare the dependency it’s best to ready a default dependency value factory which will be wired","type":"text"},{"type":"text","text":" "},{"text":"up to generate a default value for the dependency the first time it is needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can either extend an existing type to adopt the protocol or create a standalone type for the task."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is recommended to do either on the same file where the dependency is declared so it can be declared"},{"type":"text","text":" "},{"code":"private","type":"codeVoice"},{"type":"text","text":" and thus avoid exposing any deatils of the default dependency value factory implementation."}]},{"inlineContent":[{"type":"text","text":"The adoption of this protocol is also often the best place to put any logic that generates a different"},{"text":" ","type":"text"},{"text":"default implementation depending on i.e. build flags or build configuration. We’ll do a sample of that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"through this tutorial."}],"type":"paragraph"}]}],"anchor":"Implement-the-default-dependency-value-factory","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can extend an existing type to adopt "},{"identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/DefaultDependencyValueFactory","isActive":true,"type":"reference"},{"type":"text","text":". For example, addimg this to"},{"type":"text","text":" "},{"type":"text","text":"the same file where you’ll be declaring the dependency proper:"}]}],"code":"DependencySetup-2-1-Extension.swift","type":"step","runtimePreview":null,"media":null,"caption":[]},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Alternatively, you can declare a throwaway type that adopts the protocol and contains the logic."},{"text":" ","type":"text"},{"type":"text","text":"Optionally, you can call it "},{"code":"Default<API Protocol>ValueFactory","type":"codeVoice"},{"text":" which will allow you to omit the","type":"text"},{"type":"text","text":" "},{"code":"defaultValueFactory","type":"codeVoice"},{"text":" parameter and use the shortened ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/Dependency(lowercased:)","type":"reference"},{"text":" macro.","type":"text"}],"type":"paragraph"}],"media":null,"code":"DependencySetup-2-2-Thunk.swift","runtimePreview":null,"type":"step"},{"media":null,"code":"DependencySetup-2-3-Typealias.swift","caption":[{"type":"paragraph","inlineContent":[{"text":"Assume that the code of the first step of this section is elsewhere but accessible from","type":"text"},{"type":"text","text":" "},{"code":"ClownManager.swift","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As a final option, if you prefer to package the default value factory implementation away from the"},{"type":"text","text":" "},{"text":"dependency declaration, you can just typealias a type with the expected name so you can use the","type":"text"},{"type":"text","text":" "},{"text":"shortened ","type":"text"},{"identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/Dependency(lowercased:)","isActive":true,"type":"reference"},{"type":"text","text":" macro."}]}],"runtimePreview":null}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"With the default dependency value factory in place, the next step is just to attach the ","type":"text"},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" "},{"text":"macro to the API protocol.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We will now different use cases and how to use the macro’s parameters to deal with them."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"media":null,"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"defaultValueFactory","type":"codeVoice"},{"text":" parameter is used to point the macro to the implementation of the protocol","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that will produce the default value when requested."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"Applying the macro will generate a dependency protocol and dependency key based on the attachee","type":"text"},{"type":"text","text":" "},{"type":"text","text":"API protocol."}],"type":"paragraph"}],"type":"step","code":"DependencySetup-3-1-ClownManagerCustomFactory.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"If you have a type named with the pattern ","type":"text"},{"type":"codeVoice","code":"Default<API Protocol>ValueFactory"},{"text":" you can omit the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"defaultValueFactory"},{"text":" parameter from the macro and it will automatically catch on it. Here you can see","type":"text"},{"type":"text","text":" "},{"text":"the expanded version of such a use case","type":"text"}]}],"type":"step","media":null,"runtimePreview":null,"code":"DependencySetup-3-2-ClownManagerAllDefaults.swift","caption":[]},{"caption":[],"code":"DependencySetup-3-3-HONKDeviceLowercased.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Finally if your API protocol type starts with an all caps acronym you can adjust the macro behavior so","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all the generated types will respect Swift naming conventions using the "},{"type":"codeVoice","code":"lowercased"},{"type":"text","text":" parameter."}]}],"media":null}],"title":"Attach the @Dependency macro to the API protocol","anchor":"Attach-the-Dependency-macro-to-the-API-protocol"},{"stepsSection":[{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You will need to declare an extension to "},{"type":"codeVoice","code":"GlobalDependencies"},{"text":" with the same access as your API Protocol.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"That extension will adopt "},{"type":"codeVoice","code":"<API protocol>.Dependency"},{"type":"text","text":". Its whole implementation can be taken care of by"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"#GlobalDependency"},{"text":" macro, with the API protocol as its parameter.","type":"text"}]}],"media":null,"code":"DependencySetup-4-1-GlobalDependencyExtension.swift","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"The macro will expand into an implementation of the dependency protocol which accounts for potential"},{"type":"text","text":" "},{"text":"overrides.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","code":"DependencySetup-4-2-GlobalDependencyExtensionExpanded.swift","runtimePreview":null,"media":null}],"anchor":"Potatoes","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Now that all the auxiliary types are defined, we have to add our dependency to ","type":"text"},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" so it"},{"text":" ","type":"text"},{"text":"will be injectable and overridable. Due to the limitations of Swift macros (as of Swift 5.9) there’s a bit","type":"text"},{"type":"text","text":" "},{"type":"text","text":"more code to write."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Potatoes!"}]},{"kind":"callToAction","featuredEyebrow":"Tutorial","title":"Injecting Dependencies","action":{"type":"reference","isActive":true,"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}]},"abstract":[{"text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well"},{"text":" ","type":"text"},{"text":"managed and well understood.","type":"text"}]}],"variants":[{"paths":["\/tutorials\/globaldependencies\/dependencysetup"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup","interfaceLanguage":"swift"},"hierarchy":{"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies","modules":[{"projects":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup","sections":[{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Before-You-Begin"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Implement-the-default-dependency-value-factory","kind":"task"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol","kind":"task"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Potatoes","kind":"task"}]}],"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Setting-up-a-Dependency"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies","projects":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection","sections":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component","kind":"task"},{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Inject-your-dependencies-on-initialization","kind":"task"}]}]},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Overriding-Dependencies","projects":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride","sections":[{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Set-up-a-Mock-Dependency-Implementation"},{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides"}]}]}],"paths":[["doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies","doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/$volume","doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Setting-up-a-Dependency"],["doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies"]]},"references":{"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Injecting-Dependencies":{"abstract":[],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies","type":"topic","kind":"article","role":"article","url":"\/tutorials\/using-globaldependencies\/injecting-dependencies","title":"Injecting Dependencies"},"DependencySetup-4-2-GlobalDependencyExtensionExpanded.swift":{"syntax":"swift","fileName":"ClownManager.swift","content":["@Dependency","protocol ClownManager {","    func honk()","","    func slap(victim: Person)","","    func pieToFace(pie: Pie, victim: Person)","","    var shoeSize: Double { get set }","","    \/\/ And more...","}","","\/\/ Default Dependency Value Factory","","private struct DefaultClownManagerValueFactory: DefaultDependencyValueFactory {","    static func makeDefaultValue() -> any ClownManager {","        #if DEBUG","        return PagliacciClownManager(FakePagliacci())","        #else","        return PagliacciClownManager(RealPagliacci())","        #endif","    }","}","","\/\/ GlobalDependencies Integration","","extension GlobalDependencies: ClownManager.Dependency {","    \/\/ Generated by the #GlobalDependency macro","","    var clownManager: any ClownManager {","        resolveDependencyFor(key: ClownManager.DependencyKey.self)","    }","}"],"identifier":"DependencySetup-4-2-GlobalDependencyExtensionExpanded.swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33}],"fileType":"swift","type":"file"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Inject-your-dependencies-on-initialization":{"title":"Inject your dependencies on initialization","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/globaldependencies\/dependencyinjection#Inject-your-dependencies-on-initialization","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well"},{"type":"text","text":" "},{"type":"text","text":"managed and well understood."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Inject-your-dependencies-on-initialization"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup":{"role":"project","type":"topic","url":"\/tutorials\/globaldependencies\/dependencysetup","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup","title":"Setting up a Global Dependency","estimatedTime":"15min","kind":"project","abstract":[{"text":"This tutorial guides you through a sample set up for a global dependency using the ","type":"text"},{"code":"GlobalDependencies","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}]},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Overriding-Dependencies":{"kind":"article","role":"article","abstract":[],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Overriding-Dependencies","title":"Overriding Dependencies","url":"\/tutorials\/using-globaldependencies\/overriding-dependencies","type":"topic"},"DependencySetup-3-1-ClownManagerCustomFactory.swift":{"syntax":"swift","identifier":"DependencySetup-3-1-ClownManagerCustomFactory.swift","highlights":[],"type":"file","fileName":"ClownManager.swift","fileType":"swift","content":["@Dependency(defaultValueFactory: PagliacciClownManager)","protocol ClownManager {","    func honk()","","    func slap(victim: Person)","","    func pieToFace(pie: Pie, victim: Person)","","    var shoeSize: Double { get set }","","    \/\/ And more...","","    \/\/ Generated by the @Dependency macro","","    typealias Dependency = ClownManagerDependency","","    typealias DependencyKey = ClownManagerDependencyKey","}","","\/\/ Generated by the @Dependency macro","","protocol ClownManagerDependency: Dependencies {","    var clownManager: any ClownManager { get }","}","","struct ClownManagerDependencyKey: DependencyKey {","    static let defaultValue: any ClownManager = PagliacciClownManager.makeDefaultValue()","}","","\/\/ Default Dependency Value Factory","","private extension PagliacciClownManager: DefaultDependencyValueFactory {","    static func makeDefaultValue() -> any ClownManager {","        #if DEBUG","        return PagliacciClownManager(FakePagliacci())","        #else","        return PagliacciClownManager(RealPagliacci())","        #endif","    }","}"]},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Before-You-Begin":{"abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"code":"GlobalDependencies","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Before-You-Begin","type":"section","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/globaldependencies\/dependencysetup#Before-You-Begin","title":"Before You Begin"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection":{"role":"project","kind":"project","url":"\/tutorials\/globaldependencies\/dependencyinjection","type":"topic","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"text":" ","type":"text"},{"text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well","type":"text"},{"text":" ","type":"text"},{"text":"managed and well understood.","type":"text"}],"title":"Injecting Dependencies","estimatedTime":"10min","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection"},"DependencySetup-1-2-PagliacciClownManager.swift":{"syntax":"swift","fileName":"PagliacciClownManager.swift","content":["import PagliacciSDK","","class PagliacciClownManager: ClownManager {","    \/\/ Pretend there's an implementation here.","}"],"identifier":"DependencySetup-1-2-PagliacciClownManager.swift","highlights":[],"fileType":"swift","type":"file"},"doc://GlobalDependencies/documentation/GlobalDependencies/Dependency(lowercased:)":{"role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Dependency"},{"kind":"text","text":"("},{"text":"lowercased","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":"?)","kind":"text"}],"identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/Dependency(lowercased:)","url":"\/documentation\/globaldependencies\/dependency(lowercased:)","title":"Dependency(lowercased:)","kind":"symbol","abstract":[{"type":"text","text":"Variant of the "},{"type":"codeVoice","code":"Dependency"},{"text":" macro that does not take a default value factory type.","type":"text"}]},"DependencySetup-2-1-Extension.swift":{"syntax":"swift","identifier":"DependencySetup-2-1-Extension.swift","highlights":[],"type":"file","fileName":"ClownManager.swift","fileType":"swift","content":["private extension PagliacciClownManager: DefaultDependencyValueFactory {","    static func makeDefaultValue() -> any ClownManager {","        #if DEBUG","        return PagliacciClownManager(FakePagliacci())","        #else","        return PagliacciClownManager(RealPagliacci())","        #endif","    }","}"]},"doc://GlobalDependencies/documentation/GlobalDependencies/DefaultDependencyValueFactory":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/DefaultDependencyValueFactory","abstract":[{"type":"text","text":"A protocol adopted by types that can build the default value for a dependency."}],"url":"\/documentation\/globaldependencies\/defaultdependencyvaluefactory","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultDependencyValueFactory"}],"navigatorTitle":[{"kind":"identifier","text":"DefaultDependencyValueFactory"}],"title":"DefaultDependencyValueFactory","type":"topic"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol":{"title":"Attach the @Dependency macro to the API protocol","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/globaldependencies\/dependencysetup#Attach-the-Dependency-macro-to-the-API-protocol","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride":{"kind":"project","type":"topic","abstract":[{"text":"One of the most important reasons to use dependency injection is to make your software components testable by","type":"text"},{"text":" ","type":"text"},{"text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through","type":"text"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies are simple to override during tests with the provided API."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride","role":"project","title":"Overriding Dependencies","url":"\/tutorials\/globaldependencies\/dependencyoverride","estimatedTime":"10min"},"DependencySetup-1-1-ClownManager.swift":{"syntax":"swift","identifier":"DependencySetup-1-1-ClownManager.swift","highlights":[],"fileName":"ClownManager.swift","type":"file","fileType":"swift","content":["protocol ClownManager {","    func honk()","","    func slap(victim: Person)","","    func pieToFace(pie: Pie, victim: Person)","","    var shoeSize: Double { get set }","","    \/\/ And more...","}"]},"DependencySetup-3-2-ClownManagerAllDefaults.swift":{"syntax":"swift","content":["@Dependency","protocol ClownManager {","    func honk()","","    func slap(victim: Person)","","    func pieToFace(pie: Pie, victim: Person)","","    var shoeSize: Double { get set }","","    \/\/ And more...","","    \/\/ Generated by the @Dependency macro","","    typealias Dependency = ClownManagerDependency","","    typealias DependencyKey = ClownManagerDependencyKey","}","","\/\/ Generated by the @Dependency macro","","protocol ClownManagerDependency: Dependencies {","    var clownManager: any ClownManager { get }","}","","struct ClownManagerDependencyKey: DependencyKey {","    static let defaultValue: any ClownManager = DefaultClownManagerValueFactory.makeDefaultValue()","}","","\/\/ Default Dependency Value Factory","","private struct DefaultClownManagerValueFactory: DefaultDependencyValueFactory {","    static func makeDefaultValue() -> any ClownManager {","        #if DEBUG","        return PagliacciClownManager(FakePagliacci())","        #else","        return PagliacciClownManager(RealPagliacci())","        #endif","    }","}"],"fileName":"ClownManager.swift","identifier":"DependencySetup-3-2-ClownManagerAllDefaults.swift","highlights":[{"line":1},{"line":27},{"line":32}],"fileType":"swift","type":"file"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component":{"title":"Attach the InjectedDependencies Macro to Your Component","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well"},{"type":"text","text":" "},{"type":"text","text":"managed and well understood."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component","kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/globaldependencies\/dependencyinjection#Attach-the-InjectedDependencies-Macro-to-Your-Component"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Setting-up-a-Dependency":{"abstract":[],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Setting-up-a-Dependency","type":"topic","kind":"article","role":"article","url":"\/tutorials\/using-globaldependencies\/setting-up-a-dependency","title":"Setting up a Dependency"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride#Set-up-a-Mock-Dependency-Implementation":{"title":"Set up a Mock Dependency Implementation","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Set-up-a-Mock-Dependency-Implementation","role":"pseudoSymbol","type":"section","url":"\/tutorials\/globaldependencies\/dependencyoverride#Set-up-a-Mock-Dependency-Implementation","abstract":[{"type":"text","text":"One of the most important reasons to use dependency injection is to make your software components testable by"},{"type":"text","text":" "},{"type":"text","text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies are simple to override during tests with the provided API."}],"kind":"section"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Implement-the-default-dependency-value-factory":{"title":"Implement the default dependency value factory","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Implement-the-default-dependency-value-factory","role":"pseudoSymbol","type":"section","url":"\/tutorials\/globaldependencies\/dependencysetup#Implement-the-default-dependency-value-factory","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"code":"GlobalDependencies","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"kind":"section"},"DependencySetup-4-1-GlobalDependencyExtension.swift":{"syntax":"swift","fileName":"ClownManager.swift","content":["@Dependency","protocol ClownManager {","    func honk()","","    func slap(victim: Person)","","    func pieToFace(pie: Pie, victim: Person)","","    var shoeSize: Double { get set }","","    \/\/ And more...","}","","\/\/ Default Dependency Value Factory","","private struct DefaultClownManagerValueFactory: DefaultDependencyValueFactory {","    static func makeDefaultValue() -> any ClownManager {","        #if DEBUG","        return PagliacciClownManager(FakePagliacci())","        #else","        return PagliacciClownManager(RealPagliacci())","        #endif","    }","}","","\/\/ GlobalDependencies Integration","","extension GlobalDependencies: ClownManager.Dependency {","    #GlobalDependency(type: ClownManager)","}"],"identifier":"DependencySetup-4-1-GlobalDependencyExtension.swift","highlights":[],"fileType":"swift","type":"file"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed":{"title":"Adjust Access Control of Your Dependencies If Needed","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well"},{"type":"text","text":" "},{"type":"text","text":"managed and well understood."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed","kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/globaldependencies\/dependencyinjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed"},"DependencySetup-3-3-HONKDeviceLowercased.swift":{"syntax":"swift","content":["@Dependency(lowercased: \"honkDevice\")","protocol HONKDevice {","    func honk(times: Int)","","    func hooooooonk()","","    \/\/ And more...","","    \/\/ Generated by the @Dependency macro","","    typealias Dependency = HONKDeviceDependency","","    typealias DependencyKey = HONKDeviceDependencyKey","}","","\/\/ Generated by the @Dependency macro","","protocol HONKDeviceDependency: Dependencies {","    var honkDevice: any HONKDevice { get }","}","","struct HONKDeviceDependencyKey: DependencyKey {","    static let defaultValue: any HONKDevice = DefaultHONKDeviceValueFactory.makeDefaultValue()","}","","\/\/ Default Dependency Value Factory","","private struct DefaultHONKDeviceValueFactory: DefaultDependencyValueFactory {","    static func makeDefaultValue() -> any HONKDevice {","        \/\/ Let's pretend we got this type defined somewhere…","        AirHONKDevice()","    }","}"],"fileName":"HONKDevice.swift","identifier":"DependencySetup-3-3-HONKDeviceLowercased.swift","highlights":[],"fileType":"swift","type":"file"},"Xcode 15":{"type":"xcodeRequirement","title":"Xcode 15","url":"https:\/\/developer.apple.com\/download\/","identifier":"Xcode 15"},"DependencySetup-2-3-Typealias.swift":{"syntax":"swift","content":["private typealias DefaultClownManagerValueFactory = PagliacciClownManager"],"fileName":"ClownManager.swift","identifier":"DependencySetup-2-3-Typealias.swift","highlights":[{"line":1}],"fileType":"swift","type":"file"},"DependencySetup-2-2-Thunk.swift":{"syntax":"swift","identifier":"DependencySetup-2-2-Thunk.swift","highlights":[{"line":1}],"fileName":"ClownManager.swift","type":"file","fileType":"swift","content":["private struct DefaultClownManagerValueFactory: DefaultDependencyValueFactory {","    static func makeDefaultValue() -> any ClownManager {","        #if DEBUG","        return PagliacciClownManager(FakePagliacci())","        #else","        return PagliacciClownManager(RealPagliacci())","        #endif","    }","}"]},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides":{"title":"Build a `GlobalDependencies` Value With Your Overrides","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/globaldependencies\/dependencyoverride#Build-a-GlobalDependencies-Value-With-Your-Overrides","abstract":[{"type":"text","text":"One of the most important reasons to use dependency injection is to make your software components testable by"},{"type":"text","text":" "},{"type":"text","text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies are simple to override during tests with the provided API."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Potatoes":{"abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Potatoes","type":"section","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/globaldependencies\/dependencysetup#Potatoes","title":"Potatoes!"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies":{"role":"overview","url":"\/tutorials\/using-globaldependencies","type":"topic","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies","title":"Using GlobalDependencies","kind":"overview","abstract":[{"text":"The GlobalDependencies package helps abstract away global dependencies, inject them into components and","type":"text"},{"text":" ","type":"text"},{"text":"override them for test mocking purposes. The following tutorials detail how to perform each of those tasks.","type":"text"}]},"DependencySetup-1-3-HONKDevice.swift":{"syntax":"swift","content":["protocol HONKDevice {","    func honk(times: Int)","","    func hooooooonk()","}"],"fileName":"HONKDevice.swift","identifier":"DependencySetup-1-3-HONKDevice.swift","highlights":[],"fileType":"swift","type":"file"}}}