{"kind":"project","hierarchy":{"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies","modules":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Setting-up-a-Dependency","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Before-You-Begin"},{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Implement-the-default-dependency-value-factory"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol","kind":"task"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Potatoes","kind":"task"}],"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup"}]},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies","projects":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection","sections":[{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component"},{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Inject-your-dependencies-on-initialization","kind":"task"}]}]},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Overriding-Dependencies","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Set-up-a-Mock-Dependency-Implementation"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides","kind":"task"}],"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride"}]}],"paths":[["doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies","doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/$volume","doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies"],["doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"category":"Using GlobalDependencies","categoryPathComponent":"Using-GlobalDependencies","title":"Injecting Dependencies","role":"project"},"variants":[{"paths":["\/tutorials\/globaldependencies\/dependencyinjection"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"content":[{"inlineContent":[{"text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well"},{"text":" ","type":"text"},{"text":"managed and well understood.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We will be using the sample types declared in "},{"type":"reference","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup","isActive":true},{"text":" as sample dependencies through","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this tutorial."}],"type":"paragraph"}],"kind":"hero","title":"Injecting Dependencies","estimatedTimeInMinutes":10,"chapter":"Injecting Dependencies"},{"tasks":[{"title":"Attach the InjectedDependencies Macro to Your Component","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Just attach the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/InjectedDependencies(dependencyAccess:_:)","type":"reference"},{"type":"text","text":" macro to our component, with a"},{"type":"text","text":" "},{"type":"text","text":"comma-separated list of its dependencies’ API protocols as parameters."}]}],"type":"step","caption":[],"code":"DependencyInjection-1-1-InjectedDependencies.swift","media":null,"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The macro will declare the dependency type and storage property"}]}],"caption":[],"media":null,"code":"DependencyInjection-1-2-InjectedDependenciesExpanded.swift","runtimePreview":null,"type":"step"}],"anchor":"Attach-the-InjectedDependencies-Macro-to-Your-Component","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"We are creating an app to organize birthday parties and, because we live in a hellish dystopia, we "},{"type":"emphasis","inlineContent":[{"type":"text","text":"have"}]},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"have a clown. Therefore our "},{"type":"codeVoice","code":"BirthdayParty"},{"text":" component will depend on our ","type":"text"},{"type":"codeVoice","code":"ClownManager"},{"type":"text","text":". The party organizer"},{"text":" ","type":"text"},{"text":"is also legally obligated to provide the clown with a honking device, which means we’ll also have to bring","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"codeVoice","code":"HONKDevice"},{"type":"text","text":" dependency."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Let’s see how to set things up!"}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}]},{"anchor":"Adjust-Access-Control-of-Your-Dependencies-If-Needed","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"The Dependencies type is declared with the same access as its enclosing component —using ","type":"text"},{"code":"public","type":"codeVoice"},{"text":" for ","type":"text"},{"code":"open","type":"codeVoice"},{"type":"text","text":" "},{"text":"classes instead— since it will be needed for initialization. The stored property is declared ","type":"text"},{"code":"private","type":"codeVoice"},{"type":"text","text":" by"},{"text":" ","type":"text"},{"text":"default, but in some cases that may be too restrictive, i.e. if the component’s implementation is spread","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"across multiple files. The "},{"isActive":true,"identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/InjectedDependencies(dependencyAccess:_:)","type":"reference"},{"text":" ","type":"text"},{"code":"dependencyAccess","type":"codeVoice"},{"type":"text","text":" macro allows for"},{"text":" ","type":"text"},{"text":"adjustment.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s assume that "},{"type":"codeVoice","code":"BirthdayParty"},{"type":"text","text":" has its implementation spread across several files in the same module."},{"type":"text","text":" "},{"type":"text","text":"For such a case using "},{"code":"dependencyAccess: .internal","type":"codeVoice"},{"text":" should make sure that those extensions can access","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"dependencies"}]}],"code":"DependencyInjection-2-1-AccessControl.swift","caption":[],"media":null,"runtimePreview":null,"type":"step"},{"media":null,"code":"DependencyInjection-2-2-AccessControlExpanded.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As can be seen from the macro expansion that is the only thing that changes from the default."}]}],"type":"step"}],"title":"Adjust Access Control of Your Dependencies If Needed"},{"stepsSection":[{"type":"step","code":"DependencyInjection-3-1-InjectingInitializer.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Most of the time you want to add a "},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" parameter to the end of your initializer parameter list,"},{"text":" ","type":"text"},{"text":"with a type of ","type":"text"},{"code":"Dependencies","type":"codeVoice"},{"type":"text","text":". You can add a default value of "},{"type":"codeVoice","code":"GlobalDependencies.default"},{"type":"text","text":" although"},{"text":" ","type":"text"},{"text":"most of the time you’ll want to avoid using the default.","type":"text"}],"type":"paragraph"}],"media":null,"caption":[]},{"code":"DependencyInjection-3-2-UsingDependencies.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To access the injected dependencies you just use "},{"type":"codeVoice","code":"dependencies.<requested dependency>"},{"text":" like in the","type":"text"},{"text":" ","type":"text"},{"text":"example.","type":"text"}]}],"runtimePreview":null,"caption":[],"type":"step","media":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"When building other components, always pass in your dependencies. Use "},{"code":"buildGlobal()","type":"codeVoice"},{"type":"text","text":" to typecast yours"},{"type":"text","text":" "},{"text":"into the ones needed by the component being built.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null,"code":"DependencyInjection-3-3-InjectingIntoChild.swift","caption":[]}],"title":"Inject your dependencies on initialization","anchor":"Inject-your-dependencies-on-initialization","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"The actual injection should happen on initialization, but because every component has its own"},{"type":"text","text":" "},{"type":"text","text":"initialization needs the macro doesn’t generate any code for that. It’s still simple enough to set up"},{"text":" ","type":"text"},{"text":"and the compiler will ensure you perform the injection since ","type":"text"},{"type":"codeVoice","code":"dependencies"},{"text":" is declared as a ","type":"text"},{"type":"codeVoice","code":"let"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}],"kind":"tasks"},{"title":"Overriding Dependencies","abstract":[{"type":"text","text":"One of the most important reasons to use dependency injection is to make your software components testable by"},{"type":"text","text":" "},{"type":"text","text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through"},{"type":"text","text":" "},{"text":"GlobalDependencies are simple to override during tests with the provided API.","type":"text"}],"featuredEyebrow":"Tutorial","kind":"callToAction","action":{"type":"reference","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"overridingTitle":"Get started"}}],"identifier":{"url":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection","interfaceLanguage":"swift"},"references":{"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Implement-the-default-dependency-value-factory":{"title":"Implement the default dependency value factory","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Implement-the-default-dependency-value-factory","type":"section","url":"\/tutorials\/globaldependencies\/dependencysetup#Implement-the-default-dependency-value-factory","kind":"section","abstract":[{"text":"This tutorial guides you through a sample set up for a global dependency using the ","type":"text"},{"type":"codeVoice","code":"GlobalDependencies"},{"text":" ","type":"text"},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"role":"pseudoSymbol"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Inject-your-dependencies-on-initialization":{"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Inject-your-dependencies-on-initialization","role":"pseudoSymbol","kind":"section","title":"Inject your dependencies on initialization","type":"section","url":"\/tutorials\/globaldependencies\/dependencyinjection#Inject-your-dependencies-on-initialization","abstract":[{"text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The","type":"text"},{"type":"text","text":" "},{"text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"managed and well understood."}]},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Potatoes":{"kind":"section","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Potatoes","role":"pseudoSymbol","url":"\/tutorials\/globaldependencies\/dependencysetup#Potatoes","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"type":"codeVoice","code":"GlobalDependencies"},{"text":" ","type":"text"},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"title":"Potatoes!","type":"section"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies":{"kind":"overview","role":"overview","url":"\/tutorials\/using-globaldependencies","title":"Using GlobalDependencies","abstract":[{"type":"text","text":"The GlobalDependencies package helps abstract away global dependencies, inject them into components and"},{"text":" ","type":"text"},{"text":"override them for test mocking purposes. The following tutorials detail how to perform each of those tasks.","type":"text"}],"type":"topic","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Before-You-Begin":{"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Before-You-Begin","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/globaldependencies\/dependencysetup#Before-You-Begin","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"code":"GlobalDependencies","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"title":"Before You Begin","type":"section"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride#Set-up-a-Mock-Dependency-Implementation":{"kind":"section","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Set-up-a-Mock-Dependency-Implementation","role":"pseudoSymbol","url":"\/tutorials\/globaldependencies\/dependencyoverride#Set-up-a-Mock-Dependency-Implementation","abstract":[{"type":"text","text":"One of the most important reasons to use dependency injection is to make your software components testable by"},{"text":" ","type":"text"},{"text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through","type":"text"},{"type":"text","text":" "},{"text":"GlobalDependencies are simple to override during tests with the provided API.","type":"text"}],"title":"Set up a Mock Dependency Implementation","type":"section"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride":{"role":"project","title":"Overriding Dependencies","kind":"project","abstract":[{"type":"text","text":"One of the most important reasons to use dependency injection is to make your software components testable by"},{"type":"text","text":" "},{"type":"text","text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies are simple to override during tests with the provided API."}],"estimatedTime":"10min","url":"\/tutorials\/globaldependencies\/dependencyoverride","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride","type":"topic"},"DependencyInjection-3-3-InjectingIntoChild.swift":{"identifier":"DependencyInjection-3-3-InjectingIntoChild.swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"fileName":"BirthdayParty.swift","syntax":"swift","fileType":"swift","type":"file","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/**","     Initializes a birthday party","     - Parameters","       - celebrated The person who has made another revolution around the Sun.","       - date Date when the birthday happens","       - dependencies Injected dependencies","     *\/","    init(celebrated: Person, date: Date, dependencies: Dependencies) {","        self.dependencies = dependencies","        self.celebrated = celebrated","        self.date = date","","        \/\/ Assume more useful code here.","    }","","    \/\/ You don't need to unit test this one as it already involves enough mocking.","","    func introduceClown() {","        let clownManager = dependencies.clownManager","        clownManager.honk()","        clownManager.slap(victim: celebrated)","    }","","    \/\/ The high point of the party.","","    func pieTime() {","        let pie = Pie(flavor: .strawberry)","        pie.present()","","        \/\/ This makes perfect sense if you think about it.","        let pieRoulette = PieRoulette(pie, dependencies.buildGlobal())","        pieRoulette.start()","    }","","    \/\/ Lots more fun code should be here.","}"]},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Injecting-Dependencies":{"title":"Injecting Dependencies","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies","type":"topic","url":"\/tutorials\/using-globaldependencies\/injecting-dependencies","kind":"article","abstract":[],"role":"article"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol":{"title":"Attach the @Dependency macro to the API protocol","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol","type":"section","url":"\/tutorials\/globaldependencies\/dependencysetup#Attach-the-Dependency-macro-to-the-API-protocol","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" "},{"text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable.","type":"text"}],"role":"pseudoSymbol"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides":{"title":"Build a `GlobalDependencies` Value With Your Overrides","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides","type":"section","url":"\/tutorials\/globaldependencies\/dependencyoverride#Build-a-GlobalDependencies-Value-With-Your-Overrides","kind":"section","abstract":[{"text":"One of the most important reasons to use dependency injection is to make your software components testable by","type":"text"},{"type":"text","text":" "},{"text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through","type":"text"},{"type":"text","text":" "},{"text":"GlobalDependencies are simple to override during tests with the provided API.","type":"text"}],"role":"pseudoSymbol"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Setting-up-a-Dependency":{"title":"Setting up a Dependency","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Setting-up-a-Dependency","type":"topic","url":"\/tutorials\/using-globaldependencies\/setting-up-a-dependency","kind":"article","abstract":[],"role":"article"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Overriding-Dependencies":{"title":"Overriding Dependencies","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Overriding-Dependencies","type":"topic","url":"\/tutorials\/using-globaldependencies\/overriding-dependencies","kind":"article","abstract":[],"role":"article"},"DependencyInjection-1-2-InjectedDependenciesExpanded.swift":{"identifier":"DependencyInjection-1-2-InjectedDependenciesExpanded.swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7}],"fileName":"BirthdayParty","syntax":"","fileType":"","content":["class BirthdayParty {","    \/\/ Generated by the @InjectedDependencies macro","","    typealias Dependencies: any ClownManager.Dependency & HONKDevice.Dependency","","    private let dependencies: Dependencies","","    \/\/ An unforgettable event happens here.","}"],"type":"file"},"DependencyInjection-3-2-UsingDependencies.swift":{"identifier":"DependencyInjection-3-2-UsingDependencies.swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"fileName":"BirthdayParty.swift","syntax":"swift","fileType":"swift","type":"file","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/**","     Initializes a birthday party","     - Parameters","       - celebrated The person who has made another revolution around the Sun.","       - date Date when the birthday happens","       - dependencies Injected dependencies","     *\/","    init(celebrated: Person, date: Date, dependencies: Dependencies) {","        self.dependencies = dependencies","        self.celebrated = celebrated","        self.date = date","","        \/\/ Assume more useful code here.","    }","","    \/\/ You don't need to unit test this one as it already involves enough mocking.","","    func introduceClown() {","        let clownManager = dependencies.clownManager","        clownManager.honk()","        clownManager.slap(victim: celebrated)","    }","","    \/\/ Lots more fun code should be here.","}"]},"DependencyInjection-3-1-InjectingInitializer.swift":{"identifier":"DependencyInjection-3-1-InjectingInitializer.swift","highlights":[],"fileName":"BirthdayParty.swift","syntax":"swift","fileType":"swift","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/**","     Initializes a birthday party","     - Parameters","       - celebrated The person who has made another revolution around the Sun.","       - date Date when the birthday happens","       - dependencies Injected dependencies","     *\/","    init(celebrated: Person, date: Date, dependencies: Dependencies) {","        self.dependencies = dependencies","        self.celebrated = celebrated","        self.date = date","","        \/\/ Assume more useful code here.","    }","","    \/\/ An unforgettable event happens here.","}"],"type":"file"},"DependencyInjection-2-2-AccessControlExpanded.swift":{"identifier":"DependencyInjection-2-2-AccessControlExpanded.swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7}],"fileName":"BirthdayParty.swift","syntax":"swift","fileType":"swift","type":"file","content":["public class BirthdayParty {","    \/\/ Generated by the @InjectedDependencies macro","","    public typealias Dependencies: any ClownManager.Dependency & HONKDevice.Dependency","","    let dependencies: Dependencies","","    \/\/ An unforgettable event happens here.","}"]},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed":{"title":"Adjust Access Control of Your Dependencies If Needed","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed","type":"section","url":"\/tutorials\/globaldependencies\/dependencyinjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed","kind":"section","abstract":[{"text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The","type":"text"},{"type":"text","text":" "},{"text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well","type":"text"},{"type":"text","text":" "},{"text":"managed and well understood.","type":"text"}],"role":"pseudoSymbol"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection":{"kind":"project","title":"Injecting Dependencies","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection","estimatedTime":"10min","url":"\/tutorials\/globaldependencies\/dependencyinjection","type":"topic","abstract":[{"text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well"},{"type":"text","text":" "},{"type":"text","text":"managed and well understood."}],"role":"project"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup":{"type":"topic","role":"project","title":"Setting up a Global Dependency","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"kind":"project","url":"\/tutorials\/globaldependencies\/dependencysetup","estimatedTime":"15min"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component":{"title":"Attach the InjectedDependencies Macro to Your Component","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component","type":"section","url":"\/tutorials\/globaldependencies\/dependencyinjection#Attach-the-InjectedDependencies-Macro-to-Your-Component","kind":"section","abstract":[{"text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The","type":"text"},{"type":"text","text":" "},{"text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well","type":"text"},{"type":"text","text":" "},{"text":"managed and well understood.","type":"text"}],"role":"pseudoSymbol"},"doc://GlobalDependencies/documentation/GlobalDependencies/InjectedDependencies(dependencyAccess:_:)":{"kind":"symbol","url":"\/documentation\/globaldependencies\/injecteddependencies(dependencyaccess:_:)","abstract":[{"type":"text","text":"A macro that declares the dependencies of the attached type and sets it up for their injection."}],"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedDependencies","kind":"identifier"},{"kind":"text","text":"<each "},{"text":"U","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"dependencyAccess"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AccessControl","preciseIdentifier":"s:18GlobalDependencies13AccessControlO"},{"kind":"text","text":", repeat (each "},{"kind":"typeIdentifier","text":"U"},{"kind":"text","text":").Type)"}],"role":"symbol","title":"InjectedDependencies(dependencyAccess:_:)","identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/InjectedDependencies(dependencyAccess:_:)"},"DependencyInjection-2-1-AccessControl.swift":{"identifier":"DependencyInjection-2-1-AccessControl.swift","highlights":[],"fileName":"BirthdayParty.swift","syntax":"swift","fileType":"swift","content":["@InjectedDependencies(ClownManager, HONKDevice)","public class BirthdayParty {","    \/\/ An unforgettable event happens here.","}"],"type":"file"},"DependencyInjection-1-1-InjectedDependencies.swift":{"identifier":"DependencyInjection-1-1-InjectedDependencies.swift","highlights":[],"fileName":"BirthdayParty","syntax":"","fileType":"","type":"file","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/\/ An unforgettable event happens here.","}"]}}}