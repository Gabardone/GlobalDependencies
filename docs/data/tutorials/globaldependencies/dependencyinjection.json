{"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/globaldependencies\/dependencyinjection"]}],"identifier":{"url":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection","interfaceLanguage":"swift"},"kind":"project","hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup","sections":[{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Before-You-Begin"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Implement-the-default-dependency-value-factory","kind":"task"},{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Potatoes","kind":"task"}]}],"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Setting-up-a-Dependency"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies","projects":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection","sections":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component","kind":"task"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed","kind":"task"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Inject-your-dependencies-on-initialization","kind":"task"}]}]},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Overriding-Dependencies","projects":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride","sections":[{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Set-up-a-Mock-Dependency-Implementation"},{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides"}]}]}],"paths":[["doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies","doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/$volume","doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies"],["doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies"]],"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies"},"sections":[{"chapter":"Injecting Dependencies","kind":"hero","content":[{"inlineContent":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"text":" ","type":"text"},{"text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well","type":"text"},{"type":"text","text":" "},{"type":"text","text":"managed and well understood."}],"type":"paragraph"},{"inlineContent":[{"text":"We will be using the sample types declared in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup"},{"type":"text","text":" as sample dependencies through"},{"type":"text","text":" "},{"text":"this tutorial.","type":"text"}],"type":"paragraph"}],"estimatedTimeInMinutes":10,"title":"Injecting Dependencies"},{"tasks":[{"anchor":"Attach-the-InjectedDependencies-Macro-to-Your-Component","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We are creating an app to organize birthday parties and, because we live in a hellish dystopia, we ","type":"text"},{"inlineContent":[{"text":"have","type":"text"}],"type":"emphasis"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"have a clown. Therefore our ","type":"text"},{"code":"BirthdayParty","type":"codeVoice"},{"type":"text","text":" component will depend on our "},{"type":"codeVoice","code":"ClownManager"},{"text":". The party organizer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is also legally obligated to provide the clown with a honking device, which means we’ll also have to bring"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"code":"HONKDevice","type":"codeVoice"},{"type":"text","text":" dependency."}]},{"type":"paragraph","inlineContent":[{"text":"Let’s see how to set things up!","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Attach the InjectedDependencies Macro to Your Component","stepsSection":[{"caption":[],"media":null,"code":"DependencyInjection-1-1-InjectedDependencies.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Just attach the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/InjectedDependencies(dependencyAccess:_:)"},{"text":" macro to our component, with a","type":"text"},{"type":"text","text":" "},{"text":"comma-separated list of its dependencies’ API protocols as parameters.","type":"text"}]}]},{"type":"step","caption":[],"code":"DependencyInjection-1-2-InjectedDependenciesExpanded.swift","content":[{"inlineContent":[{"type":"text","text":"The macro will declare the dependency type and storage property"}],"type":"paragraph"}],"runtimePreview":null,"media":null}]},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"The Dependencies type is declared with the same access as its enclosing component —using "},{"code":"public","type":"codeVoice"},{"type":"text","text":" for "},{"type":"codeVoice","code":"open"},{"type":"text","text":" "},{"type":"text","text":"classes instead— since it will be needed for initialization. The stored property is declared "},{"code":"private","type":"codeVoice"},{"type":"text","text":" by"},{"type":"text","text":" "},{"text":"default, but in some cases that may be too restrictive, i.e. if the component’s implementation is spread","type":"text"},{"type":"text","text":" "},{"text":"across multiple files. The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/InjectedDependencies(dependencyAccess:_:)"},{"text":" ","type":"text"},{"type":"codeVoice","code":"dependencyAccess"},{"type":"text","text":" macro allows for"},{"text":" ","type":"text"},{"type":"text","text":"adjustment."}],"type":"paragraph"}]}],"anchor":"Adjust-Access-Control-of-Your-Dependencies-If-Needed","stepsSection":[{"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s assume that ","type":"text"},{"type":"codeVoice","code":"BirthdayParty"},{"type":"text","text":" has its implementation spread across several files in the same module."},{"text":" ","type":"text"},{"text":"For such a case using ","type":"text"},{"type":"codeVoice","code":"dependencyAccess: .internal"},{"text":" should make sure that those extensions can access","type":"text"},{"type":"text","text":" "},{"code":"dependencies","type":"codeVoice"}]}],"caption":[],"code":"DependencyInjection-2-1-AccessControl.swift"},{"code":"DependencyInjection-2-2-AccessControlExpanded.swift","caption":[],"media":null,"content":[{"inlineContent":[{"text":"As can be seen from the macro expansion that is the only thing that changes from the default.","type":"text"}],"type":"paragraph"}],"type":"step","runtimePreview":null}],"title":"Adjust Access Control of Your Dependencies If Needed"},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"The actual injection should happen on initialization, but because every component has its own"},{"text":" ","type":"text"},{"text":"initialization needs the macro doesn’t generate any code for that. It’s still simple enough to set up","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the compiler will ensure you perform the injection since "},{"type":"codeVoice","code":"dependencies"},{"text":" is declared as a ","type":"text"},{"type":"codeVoice","code":"let"}],"type":"paragraph"}]}],"stepsSection":[{"runtimePreview":null,"code":"DependencyInjection-3-1-InjectingInitializer.swift","media":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Most of the time you want to add a "},{"code":"dependencies","type":"codeVoice"},{"text":" parameter to the end of your initializer parameter list,","type":"text"},{"text":" ","type":"text"},{"text":"with a type of ","type":"text"},{"type":"codeVoice","code":"Dependencies"},{"type":"text","text":". You can add a default value of "},{"code":"GlobalDependencies.default","type":"codeVoice"},{"text":" although","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"most of the time you’ll want to avoid using the default."}],"type":"paragraph"}]},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To access the injected dependencies you just use "},{"type":"codeVoice","code":"dependencies.<requested dependency>"},{"type":"text","text":" like in the"},{"type":"text","text":" "},{"text":"example.","type":"text"}]}],"code":"DependencyInjection-3-2-UsingDependencies.swift","media":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When building other components, always pass in your dependencies. Use "},{"type":"codeVoice","code":"buildGlobal()"},{"type":"text","text":" to typecast yours"},{"text":" ","type":"text"},{"type":"text","text":"into the ones needed by the component being built."}]}],"runtimePreview":null,"media":null,"code":"DependencyInjection-3-3-InjectingIntoChild.swift","caption":[],"type":"step"}],"anchor":"Inject-your-dependencies-on-initialization","title":"Inject your dependencies on initialization"}],"kind":"tasks"},{"title":"Overriding Dependencies","featuredEyebrow":"Tutorial","abstract":[{"text":"One of the most important reasons to use dependency injection is to make your software components testable by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through"},{"type":"text","text":" "},{"text":"GlobalDependencies are simple to override during tests with the provided API.","type":"text"}],"kind":"callToAction","action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride","overridingTitle":"Get started","type":"reference"}}],"metadata":{"role":"project","title":"Injecting Dependencies","category":"Using GlobalDependencies","categoryPathComponent":"Using-GlobalDependencies"},"references":{"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Injecting-Dependencies":{"role":"article","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies","type":"topic","url":"\/tutorials\/using-globaldependencies\/injecting-dependencies","title":"Injecting Dependencies","kind":"article","abstract":[]},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol":{"role":"pseudoSymbol","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol","kind":"section","title":"Attach the @Dependency macro to the API protocol","url":"\/tutorials\/globaldependencies\/dependencysetup#Attach-the-Dependency-macro-to-the-API-protocol","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"code":"GlobalDependencies","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}]},"DependencyInjection-2-1-AccessControl.swift":{"highlights":[],"syntax":"swift","type":"file","fileType":"swift","fileName":"BirthdayParty.swift","content":["@InjectedDependencies(ClownManager, HONKDevice)","public class BirthdayParty {","    \/\/ An unforgettable event happens here.","}"],"identifier":"DependencyInjection-2-1-AccessControl.swift"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride":{"estimatedTime":"10min","url":"\/tutorials\/globaldependencies\/dependencyoverride","type":"topic","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride","kind":"project","title":"Overriding Dependencies","abstract":[{"text":"One of the most important reasons to use dependency injection is to make your software components testable by","type":"text"},{"type":"text","text":" "},{"text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"GlobalDependencies are simple to override during tests with the provided API."}],"role":"project"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Inject-your-dependencies-on-initialization":{"role":"pseudoSymbol","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Inject-your-dependencies-on-initialization","title":"Inject your dependencies on initialization","kind":"section","url":"\/tutorials\/globaldependencies\/dependencyinjection#Inject-your-dependencies-on-initialization","type":"section","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"type":"text","text":" "},{"text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well","type":"text"},{"type":"text","text":" "},{"text":"managed and well understood.","type":"text"}]},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Potatoes":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/globaldependencies\/dependencysetup#Potatoes","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Potatoes","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"code":"GlobalDependencies","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"title":"Potatoes!","kind":"section"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Implement-the-default-dependency-value-factory":{"title":"Implement the default dependency value factory","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Implement-the-default-dependency-value-factory","url":"\/tutorials\/globaldependencies\/dependencysetup#Implement-the-default-dependency-value-factory","role":"pseudoSymbol","kind":"section","type":"section","abstract":[{"text":"This tutorial guides you through a sample set up for a global dependency using the ","type":"text"},{"type":"codeVoice","code":"GlobalDependencies"},{"text":" ","type":"text"},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}]},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride#Set-up-a-Mock-Dependency-Implementation":{"title":"Set up a Mock Dependency Implementation","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Set-up-a-Mock-Dependency-Implementation","url":"\/tutorials\/globaldependencies\/dependencyoverride#Set-up-a-Mock-Dependency-Implementation","role":"pseudoSymbol","kind":"section","type":"section","abstract":[{"type":"text","text":"One of the most important reasons to use dependency injection is to make your software components testable by"},{"type":"text","text":" "},{"text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through","type":"text"},{"type":"text","text":" "},{"text":"GlobalDependencies are simple to override during tests with the provided API.","type":"text"}]},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/globaldependencies\/dependencyoverride#Build-a-GlobalDependencies-Value-With-Your-Overrides","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides","abstract":[{"text":"One of the most important reasons to use dependency injection is to make your software components testable by","type":"text"},{"type":"text","text":" "},{"text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through","type":"text"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies are simple to override during tests with the provided API."}],"title":"Build a `GlobalDependencies` Value With Your Overrides","kind":"section"},"DependencyInjection-3-3-InjectingIntoChild.swift":{"highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"syntax":"swift","type":"file","fileType":"swift","fileName":"BirthdayParty.swift","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/**","     Initializes a birthday party","     - Parameters","       - celebrated The person who has made another revolution around the Sun.","       - date Date when the birthday happens","       - dependencies Injected dependencies","     *\/","    init(celebrated: Person, date: Date, dependencies: Dependencies) {","        self.dependencies = dependencies","        self.celebrated = celebrated","        self.date = date","","        \/\/ Assume more useful code here.","    }","","    \/\/ You don't need to unit test this one as it already involves enough mocking.","","    func introduceClown() {","        let clownManager = dependencies.clownManager","        clownManager.honk()","        clownManager.slap(victim: celebrated)","    }","","    \/\/ The high point of the party.","","    func pieTime() {","        let pie = Pie(flavor: .strawberry)","        pie.present()","","        \/\/ This makes perfect sense if you think about it.","        let pieRoulette = PieRoulette(pie, dependencies.buildGlobal())","        pieRoulette.start()","    }","","    \/\/ Lots more fun code should be here.","}"],"identifier":"DependencyInjection-3-3-InjectingIntoChild.swift"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies":{"url":"\/tutorials\/using-globaldependencies","type":"topic","kind":"overview","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies","title":"Using GlobalDependencies","abstract":[{"text":"The GlobalDependencies package helps abstract away global dependencies, inject them into components and","type":"text"},{"type":"text","text":" "},{"text":"override them for test mocking purposes. The following tutorials detail how to perform each of those tasks.","type":"text"}],"role":"overview"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection":{"estimatedTime":"10min","url":"\/tutorials\/globaldependencies\/dependencyinjection","type":"topic","kind":"project","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection","title":"Injecting Dependencies","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"text":" ","type":"text"},{"text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well","type":"text"},{"type":"text","text":" "},{"text":"managed and well understood.","type":"text"}],"role":"project"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Overriding-Dependencies":{"title":"Overriding Dependencies","kind":"article","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Overriding-Dependencies","url":"\/tutorials\/using-globaldependencies\/overriding-dependencies","type":"topic","abstract":[],"role":"article"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component":{"role":"pseudoSymbol","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component","kind":"section","title":"Attach the InjectedDependencies Macro to Your Component","url":"\/tutorials\/globaldependencies\/dependencyinjection#Attach-the-InjectedDependencies-Macro-to-Your-Component","type":"section","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"type":"text","text":" "},{"text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well","type":"text"},{"type":"text","text":" "},{"text":"managed and well understood.","type":"text"}]},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Before-You-Begin":{"url":"\/tutorials\/globaldependencies\/dependencysetup#Before-You-Begin","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Before-You-Begin","type":"section","title":"Before You Begin","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"code":"GlobalDependencies","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"role":"pseudoSymbol"},"DependencyInjection-3-1-InjectingInitializer.swift":{"highlights":[],"syntax":"swift","type":"file","fileType":"swift","fileName":"BirthdayParty.swift","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/**","     Initializes a birthday party","     - Parameters","       - celebrated The person who has made another revolution around the Sun.","       - date Date when the birthday happens","       - dependencies Injected dependencies","     *\/","    init(celebrated: Person, date: Date, dependencies: Dependencies) {","        self.dependencies = dependencies","        self.celebrated = celebrated","        self.date = date","","        \/\/ Assume more useful code here.","    }","","    \/\/ An unforgettable event happens here.","}"],"identifier":"DependencyInjection-3-1-InjectingInitializer.swift"},"DependencyInjection-1-1-InjectedDependencies.swift":{"highlights":[],"syntax":"","type":"file","fileType":"","fileName":"BirthdayParty","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/\/ An unforgettable event happens here.","}"],"identifier":"DependencyInjection-1-1-InjectedDependencies.swift"},"doc://GlobalDependencies/documentation/GlobalDependencies/InjectedDependencies(dependencyAccess:_:)":{"url":"\/documentation\/globaldependencies\/injecteddependencies(dependencyaccess:_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedDependencies"},{"kind":"text","text":"<each "},{"kind":"genericParameter","text":"U"},{"text":">(","kind":"text"},{"text":"dependencyAccess","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AccessControl","preciseIdentifier":"s:18GlobalDependencies13AccessControlO"},{"text":", repeat (each ","kind":"text"},{"text":"U","kind":"typeIdentifier"},{"text":").Type)","kind":"text"}],"type":"topic","identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/InjectedDependencies(dependencyAccess:_:)","kind":"symbol","title":"InjectedDependencies(dependencyAccess:_:)","abstract":[{"text":"A macro that declares the dependencies of the attached type and sets it up for their injection.","type":"text"}],"role":"symbol"},"DependencyInjection-1-2-InjectedDependenciesExpanded.swift":{"highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7}],"type":"file","fileName":"BirthdayParty","identifier":"DependencyInjection-1-2-InjectedDependenciesExpanded.swift","fileType":"","syntax":"","content":["class BirthdayParty {","    \/\/ Generated by the @InjectedDependencies macro","","    typealias Dependencies: any ClownManager.Dependency & HONKDevice.Dependency","","    private let dependencies: Dependencies","","    \/\/ An unforgettable event happens here.","}"]},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup":{"url":"\/tutorials\/globaldependencies\/dependencysetup","estimatedTime":"15min","type":"topic","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup","role":"project","kind":"project","title":"Setting up a Global Dependency"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Setting-up-a-Dependency":{"title":"Setting up a Dependency","kind":"article","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Setting-up-a-Dependency","url":"\/tutorials\/using-globaldependencies\/setting-up-a-dependency","type":"topic","abstract":[],"role":"article"},"DependencyInjection-3-2-UsingDependencies.swift":{"highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"syntax":"swift","type":"file","fileType":"swift","fileName":"BirthdayParty.swift","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/**","     Initializes a birthday party","     - Parameters","       - celebrated The person who has made another revolution around the Sun.","       - date Date when the birthday happens","       - dependencies Injected dependencies","     *\/","    init(celebrated: Person, date: Date, dependencies: Dependencies) {","        self.dependencies = dependencies","        self.celebrated = celebrated","        self.date = date","","        \/\/ Assume more useful code here.","    }","","    \/\/ You don't need to unit test this one as it already involves enough mocking.","","    func introduceClown() {","        let clownManager = dependencies.clownManager","        clownManager.honk()","        clownManager.slap(victim: celebrated)","    }","","    \/\/ Lots more fun code should be here.","}"],"identifier":"DependencyInjection-3-2-UsingDependencies.swift"},"DependencyInjection-2-2-AccessControlExpanded.swift":{"highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7}],"syntax":"swift","type":"file","fileType":"swift","fileName":"BirthdayParty.swift","content":["public class BirthdayParty {","    \/\/ Generated by the @InjectedDependencies macro","","    public typealias Dependencies: any ClownManager.Dependency & HONKDevice.Dependency","","    let dependencies: Dependencies","","    \/\/ An unforgettable event happens here.","}"],"identifier":"DependencyInjection-2-2-AccessControlExpanded.swift"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed":{"role":"pseudoSymbol","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed","title":"Adjust Access Control of Your Dependencies If Needed","kind":"section","url":"\/tutorials\/globaldependencies\/dependencyinjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed","type":"section","abstract":[{"text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The","type":"text"},{"type":"text","text":" "},{"text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well","type":"text"},{"type":"text","text":" "},{"type":"text","text":"managed and well understood."}]}}}