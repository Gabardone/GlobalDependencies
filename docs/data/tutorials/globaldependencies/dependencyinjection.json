{"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/tutorials\/globaldependencies\/dependencyinjection"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection"},"metadata":{"category":"Using GlobalDependencies","role":"project","title":"Injecting Dependencies","categoryPathComponent":"Using-GlobalDependencies"},"kind":"project","hierarchy":{"paths":[["doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies","doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/$volume","doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies"],["doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies"]],"modules":[{"projects":[{"sections":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Before-You-Begin","kind":"task"},{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Implement-the-default-dependency-value-factory"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol","kind":"task"},{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Potatoes"}],"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup"}],"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Setting-up-a-Dependency"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies","projects":[{"sections":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component","kind":"task"},{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed","kind":"task"},{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Inject-your-dependencies-on-initialization"}],"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection"}]},{"projects":[{"sections":[{"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Set-up-a-Mock-Dependency-Implementation","kind":"task"},{"kind":"task","reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides"}],"reference":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride"}],"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Overriding-Dependencies"}],"reference":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies"},"sections":[{"kind":"hero","estimatedTimeInMinutes":10,"title":"Injecting Dependencies","content":[{"inlineContent":[{"text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well"},{"text":" ","type":"text"},{"type":"text","text":"managed and well understood."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We will be using the sample types declared in "},{"isActive":true,"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup","type":"reference"},{"text":" as sample dependencies through","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this tutorial."}]}],"chapter":"Injecting Dependencies"},{"tasks":[{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are creating an app to organize birthday parties and, because we live in a hellish dystopia, we "},{"inlineContent":[{"text":"have","type":"text"}],"type":"emphasis"},{"type":"text","text":" to"},{"text":" ","type":"text"},{"text":"have a clown. Therefore our ","type":"text"},{"code":"BirthdayParty","type":"codeVoice"},{"text":" component will depend on our ","type":"text"},{"type":"codeVoice","code":"ClownManager"},{"text":". The party organizer","type":"text"},{"text":" ","type":"text"},{"text":"is also legally obligated to provide the clown with a honking device, which means we’ll also have to bring","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"codeVoice","code":"HONKDevice"},{"type":"text","text":" dependency."}]},{"inlineContent":[{"type":"text","text":"Let’s see how to set things up!"}],"type":"paragraph"}]}],"anchor":"Attach-the-InjectedDependencies-Macro-to-Your-Component","stepsSection":[{"code":"DependencyInjection-1-1-InjectedDependencies.swift","content":[{"inlineContent":[{"text":"Just attach the ","type":"text"},{"identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/InjectedDependencies(dependencyAccess:_:)","type":"reference","isActive":true},{"text":" macro to our component, with a","type":"text"},{"type":"text","text":" "},{"text":"comma-separated list of its dependencies’ API protocols as parameters.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"content":[{"inlineContent":[{"type":"text","text":"The macro will declare the dependency type and storage property"}],"type":"paragraph"}],"type":"step","code":"DependencyInjection-1-2-InjectedDependenciesExpanded.swift","runtimePreview":null,"caption":[],"media":null}],"title":"Attach the InjectedDependencies Macro to Your Component"},{"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"The Dependencies type is declared with the same access as its enclosing component —using "},{"type":"codeVoice","code":"public"},{"text":" for ","type":"text"},{"type":"codeVoice","code":"open"},{"text":" ","type":"text"},{"type":"text","text":"classes instead— since it will be needed for initialization. The stored property is declared "},{"code":"private","type":"codeVoice"},{"text":" by","type":"text"},{"type":"text","text":" "},{"text":"default, but in some cases that may be too restrictive, i.e. if the component’s implementation is spread","type":"text"},{"text":" ","type":"text"},{"text":"across multiple files. The ","type":"text"},{"type":"reference","identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/InjectedDependencies(dependencyAccess:_:)","isActive":true},{"type":"text","text":" "},{"code":"dependencyAccess","type":"codeVoice"},{"text":" macro allows for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"adjustment."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Adjust Access Control of Your Dependencies If Needed","stepsSection":[{"code":"DependencyInjection-2-1-AccessControl.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s assume that "},{"type":"codeVoice","code":"BirthdayParty"},{"type":"text","text":" has its implementation spread across several files in the same module."},{"type":"text","text":" "},{"type":"text","text":"For such a case using "},{"code":"dependencyAccess: .internal","type":"codeVoice"},{"text":" should make sure that those extensions can access","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"dependencies"}]}],"media":null,"runtimePreview":null,"type":"step","caption":[]},{"media":null,"code":"DependencyInjection-2-2-AccessControlExpanded.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"As can be seen from the macro expansion that is the only thing that changes from the default.","type":"text"}]}],"type":"step"}],"anchor":"Adjust-Access-Control-of-Your-Dependencies-If-Needed"},{"anchor":"Inject-your-dependencies-on-initialization","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The actual injection should happen on initialization, but because every component has its own","type":"text"},{"type":"text","text":" "},{"type":"text","text":"initialization needs the macro doesn’t generate any code for that. It’s still simple enough to set up"},{"text":" ","type":"text"},{"text":"and the compiler will ensure you perform the injection since ","type":"text"},{"code":"dependencies","type":"codeVoice"},{"type":"text","text":" is declared as a "},{"type":"codeVoice","code":"let"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"caption":[],"media":null,"code":"DependencyInjection-3-1-InjectingInitializer.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Most of the time you want to add a ","type":"text"},{"code":"dependencies","type":"codeVoice"},{"text":" parameter to the end of your initializer parameter list,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a type of "},{"code":"Dependencies","type":"codeVoice"},{"type":"text","text":". You can add a default value of "},{"type":"codeVoice","code":"GlobalDependencies.default"},{"type":"text","text":" although"},{"type":"text","text":" "},{"text":"most of the time you’ll want to avoid using the default.","type":"text"}]}],"type":"step","runtimePreview":null},{"code":"DependencyInjection-3-2-UsingDependencies.swift","media":null,"content":[{"inlineContent":[{"type":"text","text":"To access the injected dependencies you just use "},{"code":"dependencies.<requested dependency>","type":"codeVoice"},{"type":"text","text":" like in the"},{"text":" ","type":"text"},{"type":"text","text":"example."}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"When building other components, always pass in your dependencies. Use ","type":"text"},{"type":"codeVoice","code":"buildGlobal()"},{"text":" to typecast yours","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"into the ones needed by the component being built."}]}],"runtimePreview":null,"caption":[],"type":"step","media":null,"code":"DependencyInjection-3-3-InjectingIntoChild.swift"}],"title":"Inject your dependencies on initialization"}],"kind":"tasks"},{"kind":"callToAction","action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride","isActive":true,"overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","abstract":[{"text":"One of the most important reasons to use dependency injection is to make your software components testable by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies are simple to override during tests with the provided API."}],"title":"Overriding Dependencies"}],"references":{"DependencyInjection-1-1-InjectedDependencies.swift":{"highlights":[],"fileType":"","fileName":"BirthdayParty","syntax":"","identifier":"DependencyInjection-1-1-InjectedDependencies.swift","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/\/ An unforgettable event happens here.","}"],"type":"file"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed":{"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed","url":"\/tutorials\/globaldependencies\/dependencyinjection#Adjust-Access-Control-of-Your-Dependencies-If-Needed","title":"Adjust Access Control of Your Dependencies If Needed","kind":"section","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well"},{"type":"text","text":" "},{"text":"managed and well understood.","type":"text"}],"role":"pseudoSymbol","type":"section"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection":{"kind":"project","title":"Injecting Dependencies","url":"\/tutorials\/globaldependencies\/dependencyinjection","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection","role":"project","estimatedTime":"10min","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"text":" ","type":"text"},{"text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"managed and well understood."}],"type":"topic"},"DependencyInjection-1-2-InjectedDependenciesExpanded.swift":{"type":"file","content":["class BirthdayParty {","    \/\/ Generated by the @InjectedDependencies macro","","    typealias Dependencies: any ClownManager.Dependency & HONKDevice.Dependency","","    private let dependencies: Dependencies","","    \/\/ An unforgettable event happens here.","}"],"syntax":"","fileName":"BirthdayParty","fileType":"","identifier":"DependencyInjection-1-2-InjectedDependenciesExpanded.swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7}]},"DependencyInjection-3-3-InjectingIntoChild.swift":{"highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"fileType":"swift","fileName":"BirthdayParty.swift","syntax":"swift","identifier":"DependencyInjection-3-3-InjectingIntoChild.swift","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/**","     Initializes a birthday party","     - Parameters","       - celebrated The person who has made another revolution around the Sun.","       - date Date when the birthday happens","       - dependencies Injected dependencies","     *\/","    init(celebrated: Person, date: Date, dependencies: Dependencies) {","        self.dependencies = dependencies","        self.celebrated = celebrated","        self.date = date","","        \/\/ Assume more useful code here.","    }","","    \/\/ You don't need to unit test this one as it already involves enough mocking.","","    func introduceClown() {","        let clownManager = dependencies.clownManager","        clownManager.honk()","        clownManager.slap(victim: celebrated)","    }","","    \/\/ The high point of the party.","","    func pieTime() {","        let pie = Pie(flavor: .strawberry)","        pie.present()","","        \/\/ This makes perfect sense if you think about it.","        let pieRoulette = PieRoulette(pie, dependencies.buildGlobal())","        pieRoulette.start()","    }","","    \/\/ Lots more fun code should be here.","}"],"type":"file"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Overriding-Dependencies":{"role":"article","abstract":[],"kind":"article","type":"topic","url":"\/tutorials\/using-globaldependencies\/overriding-dependencies","title":"Overriding Dependencies","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Overriding-Dependencies"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride":{"role":"project","kind":"project","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride","estimatedTime":"10min","url":"\/tutorials\/globaldependencies\/dependencyoverride","abstract":[{"type":"text","text":"One of the most important reasons to use dependency injection is to make your software components testable by"},{"text":" ","type":"text"},{"type":"text","text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through"},{"type":"text","text":" "},{"text":"GlobalDependencies are simple to override during tests with the provided API.","type":"text"}],"title":"Overriding Dependencies","type":"topic"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Setting-up-a-Dependency":{"role":"article","abstract":[],"type":"topic","kind":"article","url":"\/tutorials\/using-globaldependencies\/setting-up-a-dependency","title":"Setting up a Dependency","identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Setting-up-a-Dependency"},"DependencyInjection-3-2-UsingDependencies.swift":{"highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"fileType":"swift","fileName":"BirthdayParty.swift","syntax":"swift","identifier":"DependencyInjection-3-2-UsingDependencies.swift","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/**","     Initializes a birthday party","     - Parameters","       - celebrated The person who has made another revolution around the Sun.","       - date Date when the birthday happens","       - dependencies Injected dependencies","     *\/","    init(celebrated: Person, date: Date, dependencies: Dependencies) {","        self.dependencies = dependencies","        self.celebrated = celebrated","        self.date = date","","        \/\/ Assume more useful code here.","    }","","    \/\/ You don't need to unit test this one as it already involves enough mocking.","","    func introduceClown() {","        let clownManager = dependencies.clownManager","        clownManager.honk()","        clownManager.slap(victim: celebrated)","    }","","    \/\/ Lots more fun code should be here.","}"],"type":"file"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol":{"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Attach-the-Dependency-macro-to-the-API-protocol","url":"\/tutorials\/globaldependencies\/dependencysetup#Attach-the-Dependency-macro-to-the-API-protocol","kind":"section","title":"Attach the @Dependency macro to the API protocol","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"role":"pseudoSymbol","type":"section"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies/Injecting-Dependencies":{"identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies\/Injecting-Dependencies","url":"\/tutorials\/using-globaldependencies\/injecting-dependencies","kind":"article","title":"Injecting Dependencies","abstract":[],"role":"article","type":"topic"},"DependencyInjection-2-2-AccessControlExpanded.swift":{"fileName":"BirthdayParty.swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7}],"content":["public class BirthdayParty {","    \/\/ Generated by the @InjectedDependencies macro","","    public typealias Dependencies: any ClownManager.Dependency & HONKDevice.Dependency","","    let dependencies: Dependencies","","    \/\/ An unforgettable event happens here.","}"],"type":"file","syntax":"swift","fileType":"swift","identifier":"DependencyInjection-2-2-AccessControlExpanded.swift"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Implement-the-default-dependency-value-factory":{"kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Implement-the-default-dependency-value-factory","url":"\/tutorials\/globaldependencies\/dependencysetup#Implement-the-default-dependency-value-factory","title":"Implement the default dependency value factory","role":"pseudoSymbol","type":"section"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride#Set-up-a-Mock-Dependency-Implementation":{"kind":"section","abstract":[{"type":"text","text":"One of the most important reasons to use dependency injection is to make your software components testable by"},{"type":"text","text":" "},{"type":"text","text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through"},{"type":"text","text":" "},{"text":"GlobalDependencies are simple to override during tests with the provided API.","type":"text"}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Set-up-a-Mock-Dependency-Implementation","title":"Set up a Mock Dependency Implementation","url":"\/tutorials\/globaldependencies\/dependencyoverride#Set-up-a-Mock-Dependency-Implementation","role":"pseudoSymbol","type":"section"},"doc://GlobalDependencies/tutorials/Using-GlobalDependencies":{"identifier":"doc:\/\/GlobalDependencies\/tutorials\/Using-GlobalDependencies","url":"\/tutorials\/using-globaldependencies","kind":"overview","title":"Using GlobalDependencies","abstract":[{"type":"text","text":"The GlobalDependencies package helps abstract away global dependencies, inject them into components and"},{"text":" ","type":"text"},{"text":"override them for test mocking purposes. The following tutorials detail how to perform each of those tasks.","type":"text"}],"role":"overview","type":"topic"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Potatoes":{"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Potatoes","url":"\/tutorials\/globaldependencies\/dependencysetup#Potatoes","kind":"section","title":"Potatoes!","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"role":"pseudoSymbol","type":"section"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup":{"kind":"project","url":"\/tutorials\/globaldependencies\/dependencysetup","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"code":"GlobalDependencies","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup","estimatedTime":"15min","title":"Setting up a Global Dependency","type":"topic","role":"project"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Inject-your-dependencies-on-initialization":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well"},{"type":"text","text":" "},{"text":"managed and well understood.","type":"text"}],"kind":"section","type":"section","url":"\/tutorials\/globaldependencies\/dependencyinjection#Inject-your-dependencies-on-initialization","title":"Inject your dependencies on initialization","identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Inject-your-dependencies-on-initialization"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component":{"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyInjection#Attach-the-InjectedDependencies-Macro-to-Your-Component","url":"\/tutorials\/globaldependencies\/dependencyinjection#Attach-the-InjectedDependencies-Macro-to-Your-Component","kind":"section","title":"Attach the InjectedDependencies Macro to Your Component","abstract":[{"type":"text","text":"Once you have your dependencies set up, you’ll want to inject them into your codebase’s components. The"},{"type":"text","text":" "},{"type":"text","text":"GlobalDependencies package makes it straightforward while ensuring your component’s dependencies are well"},{"type":"text","text":" "},{"text":"managed and well understood.","type":"text"}],"role":"pseudoSymbol","type":"section"},"doc://GlobalDependencies/documentation/GlobalDependencies/InjectedDependencies(dependencyAccess:_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedDependencies"},{"kind":"text","text":"<each "},{"kind":"genericParameter","text":"U"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"dependencyAccess"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:18GlobalDependencies13AccessControlO","text":"AccessControl"},{"kind":"text","text":", repeat (each "},{"text":"U","kind":"typeIdentifier"},{"text":").Type)","kind":"text"}],"abstract":[{"text":"A macro that declares the dependencies of the attached type and sets it up for their injection.","type":"text"}],"kind":"symbol","type":"topic","title":"InjectedDependencies(dependencyAccess:_:)","url":"\/documentation\/globaldependencies\/injecteddependencies(dependencyaccess:_:)","identifier":"doc:\/\/GlobalDependencies\/documentation\/GlobalDependencies\/InjectedDependencies(dependencyAccess:_:)"},"DependencyInjection-3-1-InjectingInitializer.swift":{"fileType":"swift","content":["@InjectedDependencies(dependencyAccess: .internal, ClownManager, HONKDevice)","class BirthdayParty {","    \/**","     Initializes a birthday party","     - Parameters","       - celebrated The person who has made another revolution around the Sun.","       - date Date when the birthday happens","       - dependencies Injected dependencies","     *\/","    init(celebrated: Person, date: Date, dependencies: Dependencies) {","        self.dependencies = dependencies","        self.celebrated = celebrated","        self.date = date","","        \/\/ Assume more useful code here.","    }","","    \/\/ An unforgettable event happens here.","}"],"highlights":[],"fileName":"BirthdayParty.swift","identifier":"DependencyInjection-3-1-InjectingInitializer.swift","type":"file","syntax":"swift"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencySetup#Before-You-Begin":{"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencySetup#Before-You-Begin","url":"\/tutorials\/globaldependencies\/dependencysetup#Before-You-Begin","kind":"section","title":"Before You Begin","abstract":[{"type":"text","text":"This tutorial guides you through a sample set up for a global dependency using the "},{"type":"codeVoice","code":"GlobalDependencies"},{"type":"text","text":" "},{"type":"text","text":"package. You’ll set up all the parts needed for a dependency to be usable, injectable and overridable."}],"role":"pseudoSymbol","type":"section"},"doc://GlobalDependencies/tutorials/GlobalDependencies/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides":{"identifier":"doc:\/\/GlobalDependencies\/tutorials\/GlobalDependencies\/DependencyOverride#Build-a-GlobalDependencies-Value-With-Your-Overrides","url":"\/tutorials\/globaldependencies\/dependencyoverride#Build-a-GlobalDependencies-Value-With-Your-Overrides","title":"Build a `GlobalDependencies` Value With Your Overrides","kind":"section","abstract":[{"type":"text","text":"One of the most important reasons to use dependency injection is to make your software components testable by"},{"type":"text","text":" "},{"type":"text","text":"taking control of the dependencies’ side effects during testing. Any dependencies you manage through"},{"type":"text","text":" "},{"text":"GlobalDependencies are simple to override during tests with the provided API.","type":"text"}],"role":"pseudoSymbol","type":"section"},"DependencyInjection-2-1-AccessControl.swift":{"content":["@InjectedDependencies(ClownManager, HONKDevice)","public class BirthdayParty {","    \/\/ An unforgettable event happens here.","}"],"fileType":"swift","highlights":[],"type":"file","identifier":"DependencyInjection-2-1-AccessControl.swift","fileName":"BirthdayParty.swift","syntax":"swift"}}}